@using TrueMoney.Common.Enums
@using TrueMoney.Models
@model TrueMoney.Models.ViewModels.DealDetailsViewModel

@{
    ViewBag.Title = "Информация о заявлении " + Model.Deal.Id;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>@ViewBag.Title</h2>

<div>
    <h4>@Model.Deal.Id</h4>
    <hr/>
    <dl class="dl-horizontal">
        @ShowInfo()
        @switch (Model.Deal.DealStatus)
        {
            case DealStatus.Open:
                if (Model.IsCurrentUserBorrower)
                {
                    @ShowOffers()
                    @ShowDeleteDealForm()
                }
                else if (Model.IsCurrentUserLender)
                {
                    <p>Вы предложили свои деньги в размере @Model.Deal.Amount на @Model.Deal.DealPeriod дней под @Model.CurrentUserOffer.InterestRate %</p>
                    @ShowRevertOfferForm()
                }
                else
                {
                    @Html.ActionLink("Сделать предложение", "CreateOffer", new { dealId = Model.Deal.Id })
                }


                break;
            case DealStatus.WaitForApprove:
                if (Model.IsCurrentUserBorrower)
                {
                    @ShowDeleteDealForm()
                }
                else if (Model.IsCurrentUserLender)
                {
                    <div class="row">
                        <div class="col-md-8">
                            @using (Html.BeginForm("FinishDeal", "Deal", null, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                            {
                                @Html.AntiForgeryToken()
                                @Html.Hidden("offerId", Model.CurrentUserOffer.Id)
                                @Html.Hidden("dealId", Model.Deal.Id)
                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <input type="submit" value="Дать взаймы" class="btn btn-default"/>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    @ShowRevertOfferForm()
                }

                break;
            case DealStatus.WaitForLoan:
                if (Model.IsCurrentUserLender)
                {
                    @ShowLoanMoneyForm()
                }
                else if (Model.IsCurrentUserBorrower)
                {
                    <p>Ожидаем перевод средств от @Model.Offers.FirstOrDefault(x => x.IsApproved).OffererFullName</p>
                }

                break;
            case DealStatus.InProgress:
                if (Model.IsCurrentUserBorrower)
                {
                    var number = 1;
                    <p>Deal started @Model.PaymentPlanModel.CreateTime.ToString("D")</p>
                    <dd>
                        Платежи:
                        @foreach (var payment in Model.Payments)
                        {
                            if (payment.IsPaid)
                            {
                                <p>@number++ - paid @payment.Amount + @payment.Liability on @payment.PaidDate</p>
                            }
                            else
                            {
                                <p>@number++ - pay @payment.Amount + @payment.Liability before @payment.DueDate</p>
                            }
                        }
                        @ShowPayoutForm()
                    </dd>
                }
                else if (Model.IsCurrentUserLender)
                {
                    var number = 1;
                    <p>Deal started @Model.PaymentPlanModel.CreateTime.ToString("D")</p>
                    <dd>
                        Платежи:
                        @foreach (var payment in Model.Payments)
                        {
                            if (payment.IsPaid)
                            {
                                <p>@number++ - paid @payment.Amount + @payment.Liability on @payment.PaidDate</p>
                            }
                            else
                            {
                                <p>@number++ - will pay @payment.Amount + @payment.Liability before @payment.DueDate</p>
                            }
                        }
                    </dd>
                }

                break;
            case DealStatus.Closed:
                var paidCount = Model.Payments.Sum(x => x.Amount);
                var extraPaidCount = Model.Payments.Sum(x => x.Liability);
                var actualPeriod = (Model.PaymentPlanModel.CreateTime - Model.Payments.Last().PaidDate).Value.Days;
                if (Model.IsCurrentUserBorrower)
                {
                    <p>ВЫ успешно завершили заем</p>
                    <p>Отдолжив @Model.Deal.Amount рублей под @Model.Deal.InterestRate на @Model.Deal.DealPeriod день.</p>
                    if (Model.Deal.DealPeriod <= actualPeriod)
                    {
                        <p>Завершили в срок и выплатили @paidCount</p>
                    }
                    else
                    {
                        <p>Не успели выплатить вовремя и заплатили @paidCount, 
        из них @(paidCount - Model.Deal.Amount * (100 + Model.Deal.InterestRate)) было потрачено
        на возмещение задержек выплат</p>
                    }
                    <p>Вы потратили @(paidCount - Model.Deal.Amount) рублей.</p>
                }
                else if (Model.IsCurrentUserLender)
                {
                    <p>Вы заработали @(paidCount - Model.Deal.Amount) рублей за @Model.Deal.DealPeriod</p>
                }
                break;
        }
    </dl>
</div>

@helper ShowPayoutForm()
{
    <h4>перевиди бабло челу</h4>
    <p>
        Visa - @Html.ActionLink("Перечислить займ", "VisaPayout", "Payment", routeValues: new RouteValueDictionary(
             new
             {
                 paymentName = $"Выплата по займу #{@Model.Deal.Id}.",
                 payForId = Model.CurrentUserId,
                 dealId = Model.Deal.Id
             }), htmlAttributes: null)
    </p>
}

@helper ShowRevertOfferForm()
{
    <div class="row">
        <div class="col-md-8">
            @using (Html.BeginForm("RevertOffer", "Deal", null, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.Hidden("offerId", Model.CurrentUserOffer.Id)
                @Html.Hidden("dealId", Model.Deal.Id)
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Отменить предложение" class="btn btn-default" />
                    </div>
                </div>
            }
        </div>
    </div>
}

@helper ShowOffers()
{
    foreach (var offer in Model.Offers)
    {
        <p>@offer.OffererFullName предлагает бабало под @offer.InterestRate %</p>
        <div class="row">
            <div class="col-md-8">
                @using (Html.BeginForm("ApplyOffer", "Deal", null, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.Hidden("offerId", offer.Id)
                    @Html.Hidden("dealId", Model.Deal.Id)
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Подтвердить предложение" class="btn btn-default"/>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}

@helper ShowDeleteDealForm()
{
    <div class="row">
        <div class="col-md-8">
            @using (Html.BeginForm("Delete", "Deal", null, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
                @Html.AntiForgeryToken()
                @Html.Hidden("dealId", Model.Deal.Id)
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Удалить заявку" class="btn btn-default" />
                    </div>
                </div>
            }
        </div>
    </div>
}

@helper ShowLoanMoneyForm()
{
    <h4>перевиди бабло челу</h4>
    <p>
        Visa - @Html.ActionLink("Перечислить займ", "VisaLoan", "Payment", routeValues: new RouteValueDictionary(
             new
             {
                 paymentName = $"Перевод денег на счёт {Model.Deal.OwnerFullName}. Займ № {Model.Deal.Id}.",
                 paymentCount = Model.Deal.Amount,
                 payForId = Model.Deal.OwnerId,
                 dealId = Model.Deal.Id
             }), htmlAttributes: null)
    </p>
}

@helper ShowInfo()
{
    <dt>
        @Html.DisplayNameFor(model => model.Deal.CreateDate)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.Deal.CreateDate)
    </dd>

    <dt>
        @Html.DisplayNameFor(model => model.Deal.Amount)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.Deal.Amount)
    </dd>

    <dt>
        @Html.DisplayNameFor(model => model.Deal.InterestRate)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.Deal.InterestRate)
    </dd>

    <dt>
        @Html.DisplayNameFor(model => model.Deal.DealPeriod)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.Deal.DealPeriod)
    </dd>

    <dt>
        @Html.DisplayNameFor(model => model.Deal.Description)
    </dt>

    <dd>
        @Html.DisplayFor(model => model.Deal.Description)
    </dd>
}