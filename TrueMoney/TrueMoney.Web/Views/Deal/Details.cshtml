@using TrueMoney.Common.Enums
@using TrueMoney.Common.Extensions
@using TrueMoney.Models.Deal
@model DealDetailsViewModel

@{
    ViewBag.Title = "Информация о займе №" + Model.Deal.Id;
}

@section styles {
    <style>
        .status-Open           { color: blue; }
        .status-WaitForApprove { color: green; }
        .status-WaitForLoan    { color: yellowgreen; }
        .status-InProgress     { color: darkorange; }
        .status-Closed         { color: red; }

        .rating-Good { color: green; }
        .rating-Bad  { color: red; }

        @@media ( min-width: 768px ) {
            #deal-info dt { width: 200px; }
            #deal-info dd { margin-left: 220px; }
        }
    </style>
}

<h2>@ViewBag.Title</h2>
<hr/>

<dl id="deal-info" class="dl-horizontal">
    <dt>Заёмщик</dt>
    @*<dd><a href="@Url.Action("Details", "User", new {id = Model.Deal.OwnerId})">@Model.Deal.OwnerFullName</a></dd>*@
    <dd>@Model.Deal.OwnerFullName</dd>

    <dt>Рейтинг заёмщика</dt>
    <dd>
        <strong class="@(Model.DealOwner.Rating > 0 ? "rating-Good" : Model.DealOwner.Rating < 0 ? "rating-Bad" : "")">@Model.DealOwner.Rating</strong>
    </dd>

    <dt>@Html.DisplayNameFor(model => model.Deal.CreateDate)</dt>
    <dd>@Model.Deal.CreateDate.ToDateWithTime()</dd>

    <dt>@Html.DisplayNameFor(model => model.Deal.Amount)</dt>
    <dd>@Model.Deal.Amount р.</dd>

    <dt>@Html.DisplayNameFor(model => model.Deal.InterestRate)</dt>
    <dd>@Model.Deal.InterestRate %</dd>

    <dt>@Html.DisplayNameFor(model => model.Deal.DealPeriod)</dt>
    <dd>@Model.Deal.DealPeriod (дней)</dd>

    <dt>@Html.DisplayNameFor(model => model.Deal.Description)</dt>
    <dd>@Model.Deal.Description</dd>

    <dt>@Html.DisplayNameFor(model => model.Deal.DealStatus)</dt>
    <dd class="status-@Model.Deal.DealStatus">@Model.Deal.DealStatus.GetDescription()</dd>
</dl>

@if (Model.Deal.DealStatus == DealStatus.Open || Model.Deal.DealStatus == DealStatus.WaitForApprove)
{
    if (Model.IsCurrentUserOwner)
    {
        <hr/>
        <div class="row">
            <div class="col-md-4">
                <button id="delete-deal-btn" class="btn btn-default" onclick="deleteDeal()">Удалить заявку</button>
            </div>
        </div>

        if (Model.Offers.Count > 0)
        {
            <hr />

            <h3>Доступные предложения от других пользователей</h3>

            <table class="table table-striped table-hover">
                <tr>
                    <th>Имя пользователя</th>
                    <th>Процент</th>
                    <th>Действия</th>
                </tr>
                @foreach (var offer in Model.Offers)
                {
                    <tr>
                        <td>@offer.OffererFullName</td>
                        <td>@offer.InterestRate %</td>
                        <td>
                        @if (offer.IsApproved)
                        {
                            <button class="btn btn-default" onclick="unapproveOffer(@offer.Id)">Отменить подтверждение</button>
                        }
                        else if (!Model.Offers.Any(x => x.IsApproved))
                        {
                            <button class="btn btn-primary" onclick="approveOffer(@offer.Id)">Подтвердить предложение</button>
                        }
                        </td>
                    </tr>
                }
            </table>
        }
    }

    else if (Model.IsCurrentUserLender)
    {
        <hr/>

        <p>Вы предложили свои деньги под @Model.CurrentUserOffer.InterestRate %</p>

        <div class="row">
            <div class="col-md-4">
                @if (Model.IsCurrentUserApprovedLender && Model.Deal.DealStatus == DealStatus.WaitForApprove)
                {
                    <button id="lend-money-btn" class="btn btn-primary" onclick="finishDeal()">Дать взаймы</button>
                }

                <button id="revert-offer-btn" class="btn btn-default" onclick="revertOffer()">Отменить предложение</button>
            </div>
        </div>
    }

    else if (Model.IsCurrentUserActive)
    {
        <hr/>
        if (Model.Deal.DealStatus == DealStatus.Open)
        {
            <a href="@Url.Action("CreateOffer", "Offer", new {dealId = Model.Deal.Id})" class="btn btn-primary">Оставить предложение на эту заявку</a>
        }
        else
        {
            <p>Пользователь, оставивший эту заявку, уже принял предложение другого пользователя.</p>
        }
    }
    else
    {
        <hr/>
        <p>Вы должны дождаться подтверждения активации администратором сайта, прежде чем сможете оставлять предложения под заявками.</p>
    }
}

@if (Model.Deal.DealStatus == DealStatus.WaitForLoan)
{
    <hr />
    <p>Ожидается перевод средств заёмщику от кредитора (@Model.Offers.First(x => x.IsApproved).OffererFullName)</p>

    if (Model.IsCurrentUserApprovedLender)
    {
        <p>
            Visa: <a href="@Url.Action("VisaLoan", "Payment", new { dealId = Model.Deal.Id })">Перевести деньги пользователю</a>
        </p>
    }
}

@if (Model.Deal.DealStatus == DealStatus.InProgress)
{
    if (Model.IsCurrentUserOwner || Model.IsCurrentUserApprovedLender)
    {
        <p>Deal started @Model.PaymentPlanModel.CreateTime.ToString("D")</p>
        <div>
            Платежи:
            @for (var index = 0; index < Model.Payments.Count; index++)
            {
                var payment = Model.Payments[index];
                if (payment.IsPaid)
                {
                    <p style="background-color: greenyellow">
                        @index - оплачено @payment.Amount + @payment.Liability на дату @payment.PaidDate.Value.ToString("D")
                    </p>
                }
                else
                {
                    <p style="background-color: lightcoral">
                        @index - ожидается оплата @payment.Amount + @payment.Liability не позднее @payment.DueDate.ToString("D")
                    </p>
                }
            }
            @if (Model.IsCurrentUserOwner)
            {
                if (Model.ExtraMoney > 0)
                {
                    <p>Следующий платёж погашен частично: @Model.ExtraMoney</p>
                }
                
                var nearByPayment = Model.Payments.First(x => !x.IsPaid);

                <h4>Надо выплачивать бабло челу</h4>
                <p>Надо выплатить @(nearByPayment.Amount - Model.ExtraMoney + nearByPayment.Liability) не позднее @nearByPayment.DueDate.ToString("D")"</p>

                <p>
                    Visa: <a href="@Url.Action("VisaPayout", "Payment", new {dealId = Model.Deal.Id})">Оплатить</a>
                </p>
            }
        </div>
    }
}

@if (Model.Deal.DealStatus == DealStatus.Closed)
{
    var paidCount = Model.Payments.Sum(x => x.Amount);
    var extraPaidCount = Model.Payments.Sum(x => x.Liability);
    var actualPeriod = (Model.Payments.Last().PaidDate - Model.PaymentPlanModel.CreateTime).Value.Days;
    if (Model.IsCurrentUserOwner)
    {
        <p>Вы успешно завершили заем</p>
        <p>Взяв @Model.Deal.Amount рублей под @Model.Deal.InterestRate на @Model.Deal.DealPeriod день.</p>
        if (Model.Deal.DealPeriod >= actualPeriod)
        {
            <p>Завершили в срок и выплатили @paidCount</p>
        }
        else
        {
            <p>
                Не успели выплатить вовремя и заплатили @paidCount,
                из них @extraPaidCount было потрачено
                на возмещение задержек выплат
            </p>
        }
        <p>Вы потратили @(paidCount - Model.Deal.Amount) рублей.</p>
    }
    else if (Model.IsCurrentUserApprovedLender)
    {
        <p>Вы заработали @(paidCount - Model.Deal.Amount) рублей за @Model.Deal.DealPeriod</p>
    }
}

@section scripts {
    <script>
        $(document).ajaxStart(function() { loading(); });

        $(document).ajaxSuccess(function() { location.reload(); });

        $(document).ajaxError(function() { alert("упс, ошибочка"); location.reload(); });

        function approveOffer(offerId) {
            $.ajax({
                url: '@Url.Action("ApproveOffer", "Offer")',
                data: { offerId: offerId },
                method: 'POST',
            });
        }

        function unapproveOffer(offerId) {
            $.ajax({
                url: '@Url.Action("CancelOfferApproval", "Offer")',
                data: { offerId: offerId },
                method: 'POST',
            });
        }

        function deleteDeal() {
            $.ajax({
                url: '@Url.Action("Delete", "Deal")',
                data: { dealId: @Model.Deal.Id },
                method: 'POST',
            });
        }

        function finishDeal() {
            $.ajax({
                url: '@Url.Action("FinishDeal", "Deal")',
                data: { dealId: @Model.Deal.Id },
                method: 'POST',
            });
        }

        function revertOffer() {
            $.ajax({
                url: '@Url.Action("RevertOffer", "Offer")',
                data: { dealId: @Model.Deal.Id },
                method: 'POST',
            });
        }

        function loading(selector) {
            var element = $(selector || ".body-content");
            element.animate({ opacity: 0.2 }, 1000);
            element.css("pointer-events", "none");
        }
    </script>
}