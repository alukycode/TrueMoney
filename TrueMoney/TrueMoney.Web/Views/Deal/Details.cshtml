@using TrueMoney.Common
@using TrueMoney.Common.Enums
@using TrueMoney.Common.Extensions
@using TrueMoney.Models.Deal
@model DealDetailsViewModel

@{
    ViewBag.Title = "Информация о займе №" + Model.Deal.Id;
}

@section styles {
    <style>
        @@media ( min-width: 768px ) {
            .deal-info dt { width: 200px; }
            .deal-info dd { margin-left: 220px; }
        }
    </style>
}

<h2>@ViewBag.Title</h2>
<hr/>

<dl class="deal-info dl-horizontal">
    <dt>Заёмщик</dt>
    @*<dd><a href="@Url.Action("Details", "User", new {id = Model.Deal.OwnerId})">@Model.Deal.OwnerFullName</a></dd>*@
    <dd class="@(Model.DealOwner.Rating > 0 ? "rating-Good" : Model.DealOwner.Rating < 0 ? "rating-Bad" : "")">@Model.Deal.OwnerFullName</dd>

    <dt>Рейтинг заёмщика</dt>
    <dd>
        <strong class="@(Model.DealOwner.Rating > 0 ? "rating-Good" : Model.DealOwner.Rating < 0 ? "rating-Bad" : "")">@Model.DealOwner.Rating</strong>
    </dd>

    <dt>@Html.DisplayNameFor(model => model.Deal.CreateDate)</dt>
    <dd>@Model.Deal.CreateDate.Format()</dd>

    <dt>@Html.DisplayNameFor(model => model.Deal.Amount)</dt>
    <dd>@Model.Deal.Amount.Format() р.</dd>

    <dt>@Html.DisplayNameFor(model => model.Deal.InterestRate)</dt>
    <dd>@Model.Deal.InterestRate.Format() %</dd>

    <dt>@Html.DisplayNameFor(model => model.Deal.DealPeriod)</dt>
    <dd>@Model.Deal.DealPeriod (дней)</dd>

    <dt>@Html.DisplayNameFor(model => model.Deal.Description)</dt>
    <dd>@Model.Deal.Description</dd>

    <dt>@Html.DisplayNameFor(model => model.Deal.DealStatus)</dt>
    <dd class="status-@Model.Deal.DealStatus">@Model.Deal.DealStatus.GetDescription()</dd>
</dl>

@if (Model.Deal.DealStatus == DealStatus.Open || Model.Deal.DealStatus == DealStatus.WaitForApprove)
{
    if (Model.IsCurrentUserOwner)
    {
        <hr/>
        <div class="row">
            <div class="col-sm-4">
                <button id="delete-deal-btn" class="btn btn-default" onclick="deleteDeal()">Удалить заявку</button>
            </div>
        </div>

        if (Model.Offers.Count > 0)
        {
            <hr />

            <h3>Доступные предложения от других пользователей</h3>

            <table class="table table-striped table-hover table-bordered">
                <tr>
                    <th>Имя пользователя</th>
                    <th>Рейтинг</th>
                    <th>Процент</th>
                    <th>Действия</th>
                </tr>
                @foreach (var offer in Model.Offers)
                {
                    <tr>
                        <td class="@(offer.Rating > 0 ? "rating-Good" : offer.Rating < 0 ? "rating-Bad" : "")">@offer.OffererFullName</td>
                        <td class="@(offer.Rating > 0 ? "rating-Good" : offer.Rating < 0 ? "rating-Bad" : "")">@offer.Rating</td>
                        <td>@offer.InterestRate.Format() %</td>
                        <td>
                        @if (offer.IsApproved)
                        {
                            <button class="btn btn-default" onclick="unapproveOffer(@offer.Id)">Отменить подтверждение</button>
                        }
                        else if (!Model.Offers.Any(x => x.IsApproved))
                        {
                            <button class="btn btn-primary" onclick="approveOffer(@offer.Id)">Подтвердить предложение</button>
                        }
                        </td>
                    </tr>
                }
            </table>
        }
    }

    else if (Model.IsCurrentUserLender)
    {
        <hr/>

        <p>Вы предложили свои деньги под @Model.CurrentUserOffer.InterestRate.Format() %</p>

        <div class="row">
            <div class="col-sm-12">
                @if (Model.IsCurrentUserApprovedLender && Model.Deal.DealStatus == DealStatus.WaitForApprove)
                {
                    <button id="lend-money-btn" class="btn btn-primary" onclick="finishDeal()">Дать взаймы</button>
                }

                <button id="revert-offer-btn" class="btn btn-default" onclick="revertOffer()">Отменить предложение</button>
            </div>
        </div>
    }

    else if (Model.IsCurrentUserActive)
    {
        <hr/>
        if (Model.Deal.DealStatus == DealStatus.Open)
        {
            <a href="@Url.Action("CreateOffer", "Offer", new {dealId = Model.Deal.Id})" class="btn btn-primary">Оставить предложение на эту заявку</a>
        }
        else
        {
            <p>Пользователь, оставивший эту заявку, уже принял предложение другого пользователя.</p>
        }
    }
    else
    {
        <hr/>
        <p>Вы должны дождаться подтверждения активации администратором сайта, прежде чем сможете оставлять предложения под заявками.</p>
    }
}

@if (Model.Deal.DealStatus == DealStatus.WaitForLoan)
{
    <hr />
    <p>Ожидается перевод средств заёмщику (@Model.Deal.OwnerFullName) от кредитора (@Model.Offers.First(x => x.IsApproved).OffererFullName)</p>

    if (Model.IsCurrentUserApprovedLender)
    {
        <p>
            <a href="@Url.Action("VisaLoan", "Payment", new {dealId = Model.Deal.Id})" class="btn btn-primary btn-with-icon">
                <i class="glyphicon glyphicon-credit-card"></i>
                Перевести деньги заёмщику
            </a>
        </p>
    }
}

@if (Model.Deal.DealStatus == DealStatus.InProgress)
{
    if (Model.IsCurrentUserOwner || Model.IsCurrentUserApprovedLender)
    {
        <hr/>
        <dl class="deal-info dl-horizontal">
            <dt>Кредитор</dt>
            <dd>@Model.Offers.First(x => x.IsApproved).OffererFullName</dd>

            <dt>Дата начала сделки</dt>
            <dd>@Model.PaymentPlanModel.CreateTime.Format()</dd>
        </dl>

        <hr />
        <h3>План платежей от заёмщика кредитору</h3>

        <table class="table table-striped table-hover table-bordered">
            <tr>
                <th>№</th>
                <th>Действие</th>
                <th>Дата</th>
                <th>Сумма</th>
            </tr>

            @for (var index = 0; index < Model.Payments.Count; index++)
            {
                var payment = Model.Payments[index];
                <tr>
                    <td>@index</td>

                    @if (payment.IsPaid)
                    {
                        <td class="rating-Good">оплачено</td>
                        <td>@payment.PaidDate.Value.Format()</td>
                    }
                    else
                    {
                        <td class="rating-Bad">ожидается оплата</td>
                        <td>не позднее @payment.DueDate.Format()</td>
                    }

                    <td>
                        @payment.Amount.Format() р.
                        @if (payment.Liability > 0)
                        {
                            <span>+ @payment.Liability.Format() р. за просрочку платежа</span>
                        }
                    </td>

                </tr>
            }
        </table>
        if (Model.IsCurrentUserOwner)
        {
            <hr/>
            <h3>В общей сумме вам нужно выплатить еще @((Model.Payments.Where(x => !x.IsPaid).Sum(x => x.Amount + x.Liability) - Model.ExtraMoney).Format()) р.</h3>
            <h3>Ближайший платёж</h3>

            if (Model.ExtraMoney > 0)
            {
                <p>Следующий платёж погашен частично на <strong>@Model.ExtraMoney.Format() р.</strong></p>
            }
                
            var nearByPayment = Model.Payments.First(x => !x.IsPaid);

            <p>
                Надо выплатить <strong>@((nearByPayment.Amount - Model.ExtraMoney + nearByPayment.Liability).Format()) р.</strong>
                не позднее <strong>@nearByPayment.DueDate.Format()</strong>
            </p>

            <p>
                <a href="@Url.Action("VisaPayout", "Payment", new {dealId = Model.Deal.Id})" class="btn btn-primary btn-with-icon">
                    <i class="glyphicon glyphicon-credit-card"></i>
                    Оплатить
                </a>
            </p>
        }
    }
}

@if (Model.Deal.DealStatus == DealStatus.Closed)
{
    <hr/>
    var paidForDeal = Model.Payments.Sum(x => x.Amount);
    var paidLiabilityForDeal = Model.Payments.Sum(x => x.Liability);
    var paidAllForDeal = paidForDeal + paidLiabilityForDeal;
    var paidForService = paidAllForDeal * NumericConstants.Tax;
    var allPaidInTime = Model.Payments.All(x => x.PaidDate <= x.DueDate);
    if (Model.IsCurrentUserOwner)
    {
        <p>Вы успешно выплатили займ кредитору.</p>
        <p>Взяв @Model.Deal.Amount.Format() рублей под @Model.Deal.InterestRate.Format() % на @Model.Deal.DealPeriod день.</p>
        if (allPaidInTime)
        {
            <p>Платежи были выплачены вовремя и сумма платежей составила <b>@paidForDeal.Format() р.</b></p>
        }
        else
        {
            <p>
                Из-за того, что платежи не были выплачены вовремя, вы выплатили <b>@paidAllForDeal.Format() р.</b>,
                из них <b>@paidLiabilityForDeal</b> р. было потрачено на возмещение задержек выплат.
            </p>
        }
        <p>Переплата от исходной необходимой суммы составила @((paidForDeal + paidLiabilityForDeal - Model.Deal.Amount).Format()) р.</p>
        @*<p>В тоже время за услуги сервиса было уплачено @paidForService.Format() р., что равно @(NumericConstants.Tax * 100)% от всей суммы.</p>*@
    }
    else if (Model.IsCurrentUserApprovedLender)
    {
        <p>В результате данной сделки вы заработали @((paidForDeal + paidLiabilityForDeal - Model.Deal.Amount).Format()) р.</p>
        <p>Поздравляем!</p>
    }

    <hr/>
    <a href="@Url.Action("Index", "Deal")" class="btn btn-default">К списку заявок</a>
}

@section scripts {
    <script>
        function loading(selector) {
            var element = $(selector || ".body-content");
            element.animate({ opacity: 0.2 }, 1000);
            element.css("pointer-events", "none");
        }

        $(document).ajaxStart(function() { loading(); });

        $(document).ajaxSuccess(function() { location.reload(); });

        $(document).ajaxError(function() { alert("упс, ошибочка"); location.reload(); });

        function approveOffer(offerId) {
            $.ajax({
                url: '@Url.Action("ApproveOffer", "Offer")',
                data: { offerId: offerId },
                method: 'POST',
            });
        }

        function unapproveOffer(offerId) {
            $.ajax({
                url: '@Url.Action("CancelOfferApproval", "Offer")',
                data: { offerId: offerId },
                method: 'POST',
            });
        }

        function deleteDeal() {
            if (confirm("Вы уверены что хотите удалить эту заявку?")) {
                loading();
                $.ajax({
                    url: '@Url.Action("Delete", "Deal")',
                    data: { dealId: @Model.Deal.Id },
                    method: 'POST',
                    global: false, //If $.ajax() is called with the global option set to false, the .ajaxSuccess() method will not fire.
                    success: function() {
                        location.href = '@Url.Action("Index", "Deal")';
                    },
                    error: function() { alert("упс, ошибочка"); location.reload(); }
                });
            }
        }

        function finishDeal() {
            $.ajax({
                url: '@Url.Action("FinishDeal", "Deal")',
                data: { dealId: @Model.Deal.Id },
                method: 'POST',
            });
        }

        function revertOffer() {
            $.ajax({
                url: '@Url.Action("RevertOffer", "Offer")',
                data: { dealId: @Model.Deal.Id },
                method: 'POST',
            });
        }
    </script>
}